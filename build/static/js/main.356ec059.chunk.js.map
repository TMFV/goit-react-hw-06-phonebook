{"version":3,"sources":["ContactForm/ContactForm.module.css","redux/app/app-actions.js","redux/app/app-reducer.js","redux/store.js","ContactForm/ContactForm.jsx","ContactList/ContactList.jsx","Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","addContact","createAction","contactData","payload","id","uuid","name","number","deleteContact","filterSet","contacts","createReducer","actions","state","type","map","cur","includes","alert","types","newArrAfterDel","filter","elem","_","combineReducers","console","log","getDefaultMiddleware","middleware","logger","store","configureStore","reducer","app","appReducer","devTools","process","ContactForm","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contactForAdd","props","onSubmitData","reset","className","style","contactform","onSubmit","this","pattern","title","required","onChange","Component","ContactList","deleteId","Id","del","createList","contact","data-id","onClick","defaultProps","Filter","setFilterValue","toUpperCase","setFilterToState","App","filterArr","fArr","formSubmitHandler","contactDelete","connect","dispatch","appActions","contactId","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.356ec059.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactform\":\"ContactForm_contactform__1jNwu\"};","import types from \"./app-types\";\nimport { createAction } from \"@reduxjs/toolkit\";\nimport { uuid } from \"uuidv4\";\n\n/* const addContact = (contactData) => ({\n  type: types.ADD_CONTACT,\n  payload: {\n    id: uuid(),\n    name: contactData.name,\n    number: contactData.number,\n  },\n}); */\nconst addContact = createAction(\"app/addContact\", (contactData) => {\n  return {\n    payload: {\n      id: uuid(),\n      name: contactData.name,\n      number: contactData.number,\n    },\n  };\n});\n\n/* const deleteContact = (contactId) => ({\n  type: types.DELETE_CONTACT,\n  payload: { contactId: contactId },\n}); */\nconst deleteContact = createAction(\"app/deleteContact\");\n\n/* const filterSet = (str) => ({\n  type: types.FILTER_SET,\n  payload: str,\n});\n */\nconst filterSet = createAction(\"app/setFilterArr\");\n\nexport default { addContact, deleteContact, filterSet };\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"./app-actions\";\n//import types from \"./app-types\";\n\nconst initialContacts = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\n/* const contacts = (state = [...initialContacts], { type, payload }) => {\n  switch (type) {\n    case types.ADD_CONTACT: {\n      let nameArray = state.map((cur) => cur.name);\n      if (!nameArray.includes(payload.name)) {\n        return [...state, payload];\n      } else {\n        alert(\" Контакт вже є у телефонній книзі!!!\");\n        return state;\n      }\n    }\n\n    case types.DELETE_CONTACT: {\n      let newArrAfterDel = state.filter((elem) => elem.id !== payload);\n      return [...newArrAfterDel];\n    }\n\n    default:\n      return state;\n  }\n}; */\nconst contacts = createReducer([...initialContacts], {\n  [actions.addContact]: (state, { type, payload }) => {\n    let nameArray = state.map((cur) => cur.name);\n    if (!nameArray.includes(payload.name)) {\n      return [...state, payload];\n    } else {\n      alert(\" Контакт вже є у телефонній книзі!!!\");\n      return state;\n    }\n  },\n  [actions.deleteContact]: (state, { types, payload }) => {\n    let newArrAfterDel = state.filter((elem) => elem.id !== payload);\n    return [...newArrAfterDel];\n  },\n});\n\n/* const filter = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case types.FILTER_SET:\n      return payload;\n\n    default:\n      return state;\n  }\n}; */\n// _ - parameter not used\nconst filter = createReducer(\"\", {\n  [actions.filterSet]: (_, { payload }) => {\n    return payload;\n  },\n});\n\nexport default combineReducers({ contacts, filter });\n","//import { combineReducers } from \"redux\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport appReducer from \"./app/app-reducer\";\n\nconsole.log(getDefaultMiddleware());\n/* const rootReducer = combineReducers({\n  app: appReducer,\n}); */\n//console.log(process.env);\n//const store = createStore(rootReducer, composeWithDevTools());\nconst middleware = [...getDefaultMiddleware(), logger];\nconst store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport default store;\n","import style from \"./ContactForm.module.css\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    let contactForAdd = { name: this.state.name, number: this.state.number };\n\n    this.props.onSubmitData(contactForAdd);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    return (\n      <div className={style.contactform}>\n        <form type=\"submit\" onSubmit={this.handleSubmit}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              onChange={this.handleChange}\n              value={this.state.name}\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n              required\n              onChange={this.handleChange}\n              value={this.state.number}\n            />\n          </label>\n\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmitData: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { uuid } from \"uuidv4\";\n\nclass ContactList extends Component {\n  deleteId = (Id) => {\n    this.props.del(Id);\n  };\n  createList = () => {\n    return this.props.contacts.map((contact) => {\n      return (\n        <li key={uuid()} id={contact.id}>\n          {`${contact.name}: ${contact.number}`}\n          <button\n            data-id={contact.id}\n            onClick={() => this.deleteId(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return <ul>{this.createList()}</ul>;\n  }\n}\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  del: PropTypes.func.isRequired,\n};\nContactList.defaultProps = {\n  contacts: [],\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Filter extends Component {\n  setFilterValue = event => {\n    let value = event.currentTarget.value.toUpperCase();\n    this.props.setFilterToState(value);\n  };\n\n  render() {\n    return (\n      <div>\n        <h4>Find contacts by name</h4>\n        <input onChange={this.setFilterValue}></input>\n      </div>\n    );\n  }\n}\n\nFilter.propTypes = {\n  setFilterToState: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import React, { Component } from \"react\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport appActions from \"./redux/app/app-actions\";\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  /*   state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  }; */\n\n  /*   componentDidMount() {\n    this.firstGetContacts();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.updateLocalStorageAferChangeContacts(prevState);\n  }\n\n  firstGetContacts = () => {\n    //console.log(\" component did mount\");\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    //console.log(parsedContacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  };\n  updateLocalStorageAferChangeContacts = (prevState) => {\n    //console.log(\"component did update\");\n    if (this.state.contacts !== prevState.contacts) {\n      //console.log(\"Контакти було оновлено\");\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  };\n */\n  /*   formSubmitHandler = (data) => {\n    this.repeatControl(data);\n  }; */\n\n  /* repeatControl = (data) => {\n    let nameArray = [];\n    nameArray = this.state.contacts.map((cur) => cur.name);\n    if (!nameArray.includes(data.name)) {\n      let arrayCont = [];\n      arrayCont = [\n        ...this.state.contacts,\n        { id: uuidv4(), name: data.name, number: data.number },\n      ];\n      return this.setState({ ...this.state, contacts: arrayCont });\n    } else {\n      alert(\" Контакт вже є у телефонній книзі!!!\");\n    }\n  }; */\n\n  /*   elementDelete = (arr, idContact) => {\n    let newArr = arr.filter((elem) => elem.id !== idContact);\n    return newArr;\n  };\n\n  deleteContactFromContactList = (idContact) => {\n    let newArrAfterDel = this.elementDelete(this.state.contacts, idContact);\n    this.setState({\n      ...this.state,\n      contacts: [...newArrAfterDel],\n    });\n  };\n\n  setFilterToState = (filterData) => {\n    this.setState({ ...this.state, filter: `${filterData}` });\n  };\n*/\n  filterArr = (fArr) => {\n    let newArr = fArr.filter((cur) =>\n      cur.name.toUpperCase().includes(this.props.filter)\n    );\n    return newArr;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmitData={this.props.formSubmitHandler} />\n        <h1>Contacts</h1>\n        <Filter setFilterToState={this.props.filterSet} />\n        <ContactList\n          contacts={this.filterArr(this.props.contacts)}\n          del={this.props.contactDelete}\n        />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  contacts: state.app.contacts,\n  filter: state.app.filter,\n});\nconst mapDispatchToProrps = (dispatch) => ({\n  formSubmitHandler: (contactData) =>\n    dispatch(appActions.addContact(contactData)),\n  contactDelete: (contactId) => dispatch(appActions.deleteContact(contactId)),\n  filterSet: (str) => dispatch(appActions.filterSet(str)),\n});\nexport default connect(mapStateToProps, mapDispatchToProrps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}